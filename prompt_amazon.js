const AWS = require('aws-sdk');
const dynamo = new AWS.DynamoDB.DocumentClient();
const bedrock = new AWS.BedrockRuntime({ region: 'us-east-1' }); // adapte √† ta r√©gion

exports.handler = async (event) => {
  const productId = event.queryStringParameters?.productId;

  if (!productId) {
    return {
      statusCode: 400,
      body: JSON.stringify({ message: "Missing productId" })
    };
  }

  const data = await dynamo.get({
    TableName: "AmazonProductData",
    Key: { productId }
  }).promise();

  if (!data.Item) {
    return {
      statusCode: 404,
      body: JSON.stringify({ message: "Product not found" })
    };
  }

  // üß† Prompt int√©gr√©
  const prompt = `
Tu es un expert en durabilit√©, √©coconception et conformit√© r√©glementaire europ√©enne.

Analyse les donn√©es suivantes d‚Äôun produit Amazon-like :

- Titre : ${data.Item.title}
- Prix : ${data.Item.price}
- √âvaluation : ${data.Item.rating}
- Nombre d‚Äôavis : ${data.Item.reviews}
- Mat√©riaux : ${data.Item.materials}
- URL : ${data.Item.url}

G√©n√®re un rapport structur√© contenant :

1. ‚úÖ Score de circularit√© (0 √† 100) bas√© sur :
   - Durabilit√©
   - R√©parabilit√©
   - Recyclabilit√©
   - Pr√©sence de mat√©riaux recycl√©s
   - Facilit√© de d√©montage

2. üìà Estimation de la valeur √† vie :
   - Co√ªt par usage
   - Long√©vit√© estim√©e
   - Fr√©quence de remplacement probable
3. üá™üá∫ Conformit√© aux normes europ√©ennes de durabilit√© :
   - Respecte-t-il le R√®glement ESPR (EU 2024/1781) ?
   - Est-il compatible avec le Passeport Produit Num√©rique (DPP) ?
   - Informations sur l‚Äôorigine, les mat√©riaux, l‚Äôimpact environnemental, les recommandations de fin de vie

4. üìÑ Justification claire :
   - Pourquoi ce produit est ou n‚Äôest pas conforme
   - Points forts et faibles
   - Recommandations pour am√©liorer sa conformit√©
`;

  const body = {
    prompt: prompt,
    max_tokens: 1024,
    temperature: 0.7
  };

  try {
    const response = await bedrock.invokeModel({
      modelId: 'anthropic.claude-3-sonnet-20240229-v1:0', // ou autre mod√®le Bedrock
      contentType: 'application/json',
      accept: 'application/json',
      body: JSON.stringify(body)
    }).promise();

    const result = JSON.parse(response.body.toString());
    const report = result.completion || result.output || "No output";

    return {
      statusCode: 200,
      body: JSON.stringify({ report })
    };
  } catch (error) {
    console.error("Bedrock error:", error);
    return {
      statusCode: 500,
      body: JSON.stringify({ message: "Error generating report", error })
    };
  }
};
